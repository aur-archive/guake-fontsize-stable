*** guake-0.4.4/src/guake.old	2012-10-01 13:11:02.659552968 -0500
--- guake-0.4.4/src/guake	2012-10-01 13:49:22.782903986 -0500
***************
*** 1,4 ****
! #!/usr/bin/env python
  # -*- coding: utf-8; -*-
  """
  Copyright (C) 2007-2012 Lincoln de Sousa <lincoln@minaslivre.org>
--- 1,4 ----
! #!/usr/bin/env python2
  # -*- coding: utf-8; -*-
  """
  Copyright (C) 2007-2012 Lincoln de Sousa <lincoln@minaslivre.org>
***************
*** 28,34 ****
  
  import gtk
  import vte
! from pango import FontDescription
  import pynotify
  import gconf
  import dbus
--- 28,34 ----
  
  import gtk
  import vte
! from pango import FontDescription, SCALE
  import pynotify
  import gconf
  import dbus
***************
*** 280,286 ****
              client.get_string(KEY('/style/font/color')))
          bgcolor = gtk.gdk.color_parse(
              client.get_string(KEY('/style/background/color')))
!         palette = [gtk.gdk.color_parse(color) for color in 
              entry.value.get_string().split(':')]
          for i in self.guake.term_list:
              i.set_colors(fgcolor, bgcolor, palette)
--- 280,286 ----
              client.get_string(KEY('/style/font/color')))
          bgcolor = gtk.gdk.color_parse(
              client.get_string(KEY('/style/background/color')))
!         palette = [gtk.gdk.color_parse(color) for color in
              entry.value.get_string().split(':')]
          for i in self.guake.term_list:
              i.set_colors(fgcolor, bgcolor, palette)
***************
*** 362,368 ****
  
          keys = ['toggle_fullscreen', 'new_tab', 'close_tab', 'rename_tab',
                  'previous_tab', 'next_tab', 'clipboard_copy', 'clipboard_paste',
!                 'quit',
                  ]
          for key in keys:
              notify_add(LKEY(key), self.reload_accelerators)
--- 362,368 ----
  
          keys = ['toggle_fullscreen', 'new_tab', 'close_tab', 'rename_tab',
                  'previous_tab', 'next_tab', 'clipboard_copy', 'clipboard_paste',
!                 'quit', 'fontsize_increase', 'fontsize_decrease', 'fontsize_reset'
                  ]
          for key in keys:
              notify_add(LKEY(key), self.reload_accelerators)
***************
*** 442,447 ****
--- 442,462 ----
              self.accel_group.connect_group(key, mask, gtk.ACCEL_VISIBLE,
                                             self.guake.accel_toggle_fullscreen)
  
+         key, mask = gtk.accelerator_parse(gets('fontsize_increase'))
+         if key > 0:
+             self.accel_group.connect_group(key, mask, gtk.ACCEL_VISIBLE,
+                                            self.guake.accel_fontsize_increase)
+ 
+         key, mask = gtk.accelerator_parse(gets('fontsize_decrease'))
+         if key > 0:
+             self.accel_group.connect_group(key, mask, gtk.ACCEL_VISIBLE,
+                                            self.guake.accel_fontsize_decrease)
+ 
+         key, mask = gtk.accelerator_parse(gets('fontsize_reset'))
+         if key > 0:
+             self.accel_group.connect_group(key, mask, gtk.ACCEL_VISIBLE,
+                                            self.guake.accel_fontsize_reset)
+ 
  class GuakeTerminal(vte.Terminal):
      """Just a vte.Terminal with some properties already set.
      """
***************
*** 781,787 ****
              self.set_terminal_focus()
          else:
              self.hide()
!  
      def show(self):
          """Shows the main window and grabs the focus on it.
          """
--- 796,802 ----
              self.set_terminal_focus()
          else:
              self.hide()
! 
      def show(self):
          """Shows the main window and grabs the focus on it.
          """
***************
*** 859,864 ****
--- 874,898 ----
              term_idx += 1
          return total_procs
  
+     def modify_current_tab_fontsize(self, increase=0):
+         """Modify the fontsize of the terminal by
+         the increase parameter, if 0 then set the default fontsize.
+         """
+         current_term = self.term_list[self.notebook.get_current_page()]
+ 
+         if(increase == 0):
+             font_string = self.client.get_string(KEY('/style/font/style'))
+             font = FontDescription(font_string)
+         else:
+             font = current_term.get_font()
+ 
+         font_size = font.get_size()
+         new_size = (font_size / SCALE + increase) * SCALE
+         font.set_size(new_size)
+         current_term.set_font(font)
+ 
+         return True
+ 
      # -- configuration --
  
      def load_config(self):
***************
*** 988,993 ****
--- 1022,1048 ----
          # from fullscreen. broken on old compiz/metacity versions :C
          self.client.notify(KEY('/general/window_height'))
  
+     def accel_fontsize_increase(self, *args):
+         """Callback increases the fontsize of the terminal by
+         adding 2 to the actual fontsize.
+         """
+         self.modify_current_tab_fontsize(2)
+         return True
+ 
+     def accel_fontsize_decrease(self, *args):
+         """Callback increases the fontsize of the terminal by
+         adding -2 to the actual fontsize.
+         """
+         self.modify_current_tab_fontsize(-2)
+         return True
+ 
+     def accel_fontsize_reset(self, *args):
+         """Callback increases the fontsize of the terminal by
+         adding -2 to the actual fontsize.
+         """
+         self.modify_current_tab_fontsize(0)
+         return True
+ 
      # -- callbacks --
  
      def on_terminal_exited(self, term, widget):
